{
  "hash": "ef1f9736e7aa9c4d0a077d528bb59d3f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"{{< var md-06.titel >}}\"\nsubtitle: \"{{< var course.long-titel >}}\"\nauthor: \"Lars Schöbitz\"\ndate: \"2024-10-29\"\ndate-format: \"MMM D, YYYY\"\nformat: \n  revealjs: \n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    chalkboard: true\nfooter: \"[{{< fa link >}} {{< var course.site-short >}}]({{< var course.site >}})\"\neditor: source\nexecute:\n  freeze: auto\nparams:\n    modul: 6\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Modul 5 - Zusatzaufgabe 3\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](md-06-daten-typen_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n## Lernziele (für diese Woche)\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n1. Die Lernenden können die Bedeutung von Vektoren mit Bezug auf einen Dataframe erläutern.\n2. Die Lernenden können drei verschiedene Methoden anwenden um auf einen Vektor in einem dataframe zuzugreifen.\n3. Die Lernenden können die vier wichtigsten atomaren Vektortypen in R auflisten.\n4. Die Lernenden können einen for loop verwenden, um durch die Elemente eines Vektors in einem Dataframe zu iterieren und spezifische Operationen auf jedes Element anzuwenden.\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n# Daten Typen und Vektoren {background-color=\"#4C326A\"}\n\n## Why care about data types? Warum sind Daten Typen wichtig?\n\n::: {style=\"width:75%;height:0;padding-bottom:83%;position:relative;\"}\n<iframe src=\"https://giphy.com/embed/SvRuvlSEa67wNNHuHy\" width=\"75%\" height=\"75%\" style=\"position:absolute\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen>\n\n</iframe>\n:::\n\n<p><a href=\"https://giphy.com/gifs/Friends-episode-20-friends-tv-the-one-with-baby-shower-SvRuvlSEa67wNNHuHy\">via GIPHY</a></p>\n\n## Beispiel: Recycling Umfrage in Zürich {.smaller .scrollable}\n\nEine Umfrage zum Recycling-Verhalten in der Stadt Zürich:\n\n- `job`: Was ist dein Berug?\n- `price_glass`: Welchen monatlichen Betrag wärst du bereit für eine Metall/Glas-Tonne vor deinem Haus zu zahlen? \n- \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| id|job      |price_glass                                   |\n|--:|:--------|:---------------------------------------------|\n|  1|Student  |0                                             |\n|  2|Retired  |0                                             |\n|  3|Other    |0                                             |\n|  4|Employed |10                                            |\n|  5|Employed |See comment                                   |\n|  6|Student  |5-10                                          |\n|  7|Student  |0                                             |\n|  8|Retired  |0                                             |\n|  9|Student  |10                                            |\n| 10|Employed |0                                             |\n| 11|Employed |20 (2chf per person with 10 people in the WG) |\n| 12|Student  |10                                            |\n| 13|Student  |10                                            |\n| 14|Employed |0                                             |\n| 15|Student  |10                                            |\n| 16|Student  |0                                             |\n| 17|Employed |5-10                                          |\n| 18|Other    |0                                             |\n| 19|Student  |0                                             |\n| 20|Employed |10                                            |\n| 21|Employed |0                                             |\n| 22|Employed |5                                             |\n\n\n:::\n:::\n\n\n\n::: footer\nDaten aus [@benaleya2022researcha]\n:::\n\n## Oh warum klappt das nicht?! \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data_small |> \n  summarise(mean_price_glass = mean(price_glass))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_price_glass\n             <dbl>\n1               NA\n```\n\n\n:::\n:::\n\n\n\n## Oh warum klappt das immernoch nicht!!??\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data_small |> \n  summarise(mean_price_glass = mean(price_glass, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_price_glass\n             <dbl>\n1               NA\n```\n\n\n:::\n:::\n\n\n\n## Atme tief durch und schau dir deine Daten an {.smaller .scrollable}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| id|job      |price_glass                                   |\n|--:|:--------|:---------------------------------------------|\n|  1|Student  |0                                             |\n|  2|Retired  |0                                             |\n|  3|Other    |0                                             |\n|  4|Employed |10                                            |\n|  5|Employed |See comment                                   |\n|  6|Student  |5-10                                          |\n|  7|Student  |0                                             |\n|  8|Retired  |0                                             |\n|  9|Student  |10                                            |\n| 10|Employed |0                                             |\n| 11|Employed |20 (2chf per person with 10 people in the WG) |\n| 12|Student  |10                                            |\n| 13|Student  |10                                            |\n| 14|Employed |0                                             |\n| 15|Student  |10                                            |\n| 16|Student  |0                                             |\n| 17|Employed |5-10                                          |\n| 18|Other    |0                                             |\n| 19|Student  |0                                             |\n| 20|Employed |10                                            |\n| 21|Employed |0                                             |\n| 22|Employed |5                                             |\n\n\n:::\n:::\n\n\n\n## Atme tief durch und schau dir deine Daten an {.smaller .scrollable}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 × 3\n      id job      price_glass\n   <int> <chr>    <chr>      \n 1     1 Student  0          \n 2     2 Retired  0          \n 3     3 Other    0          \n 4     4 Employed 10         \n 5     5 Employed See comment\n 6     6 Student  5-10       \n 7     7 Student  0          \n 8     8 Retired  0          \n 9     9 Student  10         \n10    10 Employed 0          \n# ℹ 12 more rows\n```\n\n\n:::\n:::\n\n\n\n## Ein sehr typischer Schritt in der Datenbereinigung! {.small}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3,4|5,6|7\"}\nsurvey_data_small |> \n  mutate(price_glass_new = case_when(\n    price_glass == \"5-10\" ~ \"7.5\",\n    price_glass == \"05-Oct\" ~ \"7.5\",\n    str_detect(price_glass, pattern = \"2chf\") == TRUE ~ \"20\",\n    str_detect(price_glass, pattern = \"See comment\") == TRUE ~ NA_character_,\n    TRUE ~ price_glass\n  )) \n```\n:::\n\n\n\n## Ein sehr typischer Schritt in der Datenbereinigung!  {.scrollable .small}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| id|job      |price_glass_new |price_glass                                   |\n|--:|:--------|:---------------|:---------------------------------------------|\n|  1|Student  |0               |0                                             |\n|  2|Retired  |0               |0                                             |\n|  3|Other    |0               |0                                             |\n|  4|Employed |10              |10                                            |\n|  5|Employed |NA              |See comment                                   |\n|  6|Student  |7.5             |5-10                                          |\n|  7|Student  |0               |0                                             |\n|  8|Retired  |0               |0                                             |\n|  9|Student  |10              |10                                            |\n| 10|Employed |0               |0                                             |\n| 11|Employed |20              |20 (2chf per person with 10 people in the WG) |\n| 12|Student  |10              |10                                            |\n| 13|Student  |10              |10                                            |\n| 14|Employed |0               |0                                             |\n| 15|Student  |10              |10                                            |\n| 16|Student  |0               |0                                             |\n| 17|Employed |7.5             |5-10                                          |\n| 18|Other    |0               |0                                             |\n| 19|Student  |0               |0                                             |\n| 20|Employed |10              |10                                            |\n| 21|Employed |0               |0                                             |\n| 22|Employed |5               |5                                             |\n\n\n:::\n:::\n\n\n\n## Summarise? Argh!!!! {.small auto-animate=\"true\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"9\"}\nsurvey_data_small |> \n  mutate(price_glass_new = case_when(\n    price_glass == \"5-10\" ~ \"7.5\",\n    price_glass == \"05-Oct\" ~ \"7.5\",\n    str_detect(price_glass, pattern = \"20\") == TRUE ~ \"20\",\n    str_detect(price_glass, pattern = \"See comment\") == TRUE ~ NA_character_,\n    TRUE ~ price_glass\n  )) |> \n  summarise(mean_price_glass = mean(price_glass_new, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_price_glass\n             <dbl>\n1               NA\n```\n\n\n:::\n:::\n\n\n\n## Respektiere deine Daten Typen!\n\n::: {.callout-important appearance=\"simple\"}\nDen Durchschnitt von einem Vektor mit Typ **\"character\"** zu berechnen ist nicht möglich.\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 × 4\n      id job      price_glass price_glass_new\n   <int> <chr>    <chr>       <chr>          \n 1     1 Student  0           0              \n 2     2 Retired  0           0              \n 3     3 Other    0           0              \n 4     4 Employed 10          10             \n 5     5 Employed See comment <NA>           \n 6     6 Student  5-10        7.5            \n 7     7 Student  0           0              \n 8     8 Retired  0           0              \n 9     9 Student  10          10             \n10    10 Employed 0           0              \n# ℹ 12 more rows\n```\n\n\n:::\n:::\n\n\n\n## Respektiere deine Daten Typen! {.smaller auto-animate=\"true\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"9|10\"}\nsurvey_data_small |> \n  mutate(price_glass_new = case_when(\n    price_glass == \"5-10\" ~ \"7.5\",\n    price_glass == \"05-Oct\" ~ \"7.5\",\n    str_detect(price_glass, pattern = \"20\") == TRUE ~ \"20\",\n    str_detect(price_glass, pattern = \"See comment\") == TRUE ~ NA_character_,\n    TRUE ~ price_glass\n  )) |> \n  mutate(price_glass_new = as.numeric(price_glass_new)) |> \n  summarise(mean_price_glass = mean(price_glass_new, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  mean_price_glass\n             <dbl>\n1             4.76\n```\n\n\n:::\n:::\n\n\n\n## Ich bin dran: Vektoren und Iteration mit for-Schleifen\n\n<br><br>\n\n::: {.hand-purple-large style=\"text-align: center;\"}\nZurücklehnen und Fragen stellen!\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_51ac1e16\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">25</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Pause machen\n\n[Bitte steh auf und beweg dich.]{.highlight-yellow} Lasst eure E-Mails in Frieden ruhen.\n\n![](img/md-04/pixel-art-tree.png){width=\"50%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_173337ee\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n::: footer\nBild erzeugt mit [DALL-E 3 by OpenAI](https://openai.com/blog/dall-e/)\n:::\n\n## Ihr seid dran: 02-vektor-typen-ihr.qmd\n\n::: task\n1.  Öffne [posit.cloud](https://posit.cloud) in deinem Browser (verwende dein Lesezeichen).\n2.  Öffne den rstatszh-k009 Arbeitsbereich (Workspace) für den Kurs.\n3.  Klicke auf [Start]{.highlight-yellow} neben [md-05-uebungen]{.highlight-yellow}.\n4.  Suche im Dateimanager im Fenster unten rechts die Datei [`02-vektor-typen-ihr.qmd`]{.highlight-yellow} und klicke darauf, um sie im Fenster oben links zu öffnen.\n5.  Folge den Anweisungen in der Datei.\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_9c8cdeb7\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">35</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Pause machen\n\n[Bitte steh auf und beweg dich.]{.highlight-yellow} Lasst eure E-Mails in Frieden ruhen.\n\n![](img/md-04/pixel-art-tree.png){width=\"50%\"}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_790d8e7a\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n::: footer\nBild erzeugt mit [DALL-E 3 by OpenAI](https://openai.com/blog/dall-e/)\n:::\n\n# Sensitive Daten und GitHub\n\n## schützenswerte Daten dürfen nicht auf GitHub\n\n- verletzen die Privatsphäre (z.B. Einzeldaten)\n- sind sicherheitskritisch (z.B. Passwörter)\n- unterliegen Drittrechten (z.B. Copyrights)\n\n## Lösung: `.gitignore`\n\n- Dateien und Verzeichnisse in `.gitignore` eintragen\n- werden nicht auf GitHub hochgeladen\n\n::: {.callout-important}\n## Daten teilen \nDamit eine Analyse reproduzierbar ist, müssen die Daten für andere zugänglich sein. Die Dateien können auf anderen Wegen geteilt werden, z.B. per E-Mail, USB-Stick, Cloud-Dienst, etc.\n:::\n\n## Informationssicherheit\n\nFolgender Dateipfad enthält Informationen zum Dateisystem und sollte nicht auf GitHub hochgeladen werden:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(\"C:/Users/Lars/Documents/Projekte/projekt-umfrage/daten/umfrage_daten.csv\")\n```\n:::\n\n\n\nEin guter Weg dies zu vermeiden ist die Verwendung von relativen Pfaden in Kombination mit der `here()` Funktion aus dem gleichnamigen Paket.\n\nIm RStudio Project / GitHub repository mit dem Namen `projekt-umfrage`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(here::here(\"daten/umfrage_daten.csv\"))\n```\n:::\n\n\n\n# Zusatzaufgaben Modul 6 {background-color=\"#4C326A\"}\n\n## Modul 6 Dokumentation\n\n::: learn-more\n[rstatszh-k009.github.io/website/module/md-06.html](https://rstatszh-k009.github.io/website/module/md-06.html)\n\n\n\n```{=html}\n<iframe src=\"https://rstatszh-k009.github.io/website/module/md-06.html\" width=\"100%\" height=\"500\" style=\"border:2px solid #123233;\" title=\"Modul 6 Dokumentation\"></iframe>\n```\n\n\n:::\n\n## Zusatzaufgaben Abgabedatum\n\n-   Abgabedatum: [Montag, 04. November]{.highlight-yellow}\n-   Korrektur- und Feedbackphase bis zu: Donnerstag, 07. November \n\n# Danke {background-color=\"#4C326A\"}\n\n## Danke! 🌻 \n\nFolien erstellt mit revealjs und Quarto: https://quarto.org/docs/presentations/revealjs/ Access slides als [PDF auf GitHub](https://github.com/rstatszh-k009/website/raw/main/folien/md-06-daten-typen.pdf)\n\nAlle Materialien sind lizenziert unter [Creative Commons Attribution Share Alike 4.0 International](https://creativecommons.org/licenses/by-sa/4.0/).",
    "supporting": [
      "md-06-daten-typen_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}