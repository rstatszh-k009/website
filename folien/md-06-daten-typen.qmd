---
title: "{{< var md-06.titel >}}"
subtitle: "{{< var course.long-titel >}}"
author: "Lars Schöbitz"
date: "2024-10-29"
date-format: "MMM D, YYYY"
format: 
  revealjs: 
    theme: slides.scss
    transition: fade
    slide-number: true
    chalkboard: true
footer: "[{{< fa link >}} {{< var course.site-short >}}]({{< var course.site >}})"
editor: source
execute:
  freeze: auto
params:
    modul: 6
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(countdown)
library(tidyverse)
library(epoxy)
library(gapminder)
```

## Lernziele (für diese Woche)

```{r}
#| label: lernziele

lernziele <- readr::read_csv(here::here("data/tbl-01-rstatszh-k009-lernziele.csv")) |> 
  dplyr::filter(modul == params$modul) |>
  dplyr::pull(lernziele)

```

```{epoxy}
{1:length(lernziele)}. {lernziele[1:length(lernziele)]}
```

```{r}
library(tidyverse)
library(knitr)
library(gt)
library(epoxy)
library(palmerpenguins)
library(countdown)

ggplot2::theme_set(ggplot2::theme_gray(base_size = 16))

```

```{r}

waste_data_lord1 <- read_csv("https://raw.githubusercontent.com/rbtl-fs22/rbtl-fs22-data/main/raw_data/lord-of-the-bins/04-05-2022_rbtl_data_sheet1.csv")

waste_data_lord2 <- read_csv("https://raw.githubusercontent.com/rbtl-fs22/rbtl-fs22-data/main/raw_data/lord-of-the-bins/04-05-2022_rbtl_data_sheet2.csv")

survey_data <- read_csv("https://raw.githubusercontent.com/rbtl-fs22/rbtl-fs22-data/main/raw_data/partners-in-grime/2022-05-04_survey-data.csv") |> 
  mutate(id = seq(1:n()))

survey_data_small <- survey_data |> 
  select(id, job, price_glass)

survey_data_tidy <- survey_data |> 
  select(id, job, residence_situation, starts_with("price")) |> 
  pivot_longer(cols = starts_with("price"),
               names_to = "waste_category",
               values_to = "price") |> 
  mutate(waste_category = str_remove(waste_category, pattern = "price_")) |> 
  mutate(price_new = case_when(
    price == "5 to 10" ~ "7.5",
    price == "05-Oct" ~ "7.5",
    str_detect(price, pattern = "20") == TRUE ~ "20",
    str_detect(price, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price
  )) |> 
  mutate(price = as.numeric(price_new)) |> 
  select(-price_new)

#survey_data_tidy |>
#  count(job, residence_situation, waste_category, price) |>
#  ggplot(aes(x = factor(price), y = n, fill = job)) +
#  geom_col()
# 
```

```{r}
#| eval: true

waste_data <- bind_rows(waste_data_lord1, waste_data_lord2)

waste_data_untidy <- waste_data |> 
  filter(!is.na(objid)) |> 
  rename(non_recyclable_Kg = `non_recyclables_ Kg`,
         recyclable_Kg = recyclables_Kg) |>
  relocate(c(recyclable_Kg, non_recyclable_Kg), .before = weight_total_kg) |> 
  select(objid, location, pet_Kg:weight_total_kg) |> 
  mutate(objid = factor(objid)) |>
  rename_with(~str_remove(.x, "_Kg|_kg")) |> 
  rename_with(~str_remove(.x, "_content")) |> 
  rename(total = weight_total)


waste_category_levels <- c("glass", "metal_alu", "paper", "pet", "other")

waste_data_tidy <- waste_data_untidy |> 
  select(objid:paper, non_recyclable) |> 
  rename(other = non_recyclable) |> 
  mutate(objid = factor(objid)) |>
  pivot_longer(cols = pet:other,
               names_to = "waste_category",
               values_to = "weight") |> 
  mutate(waste_category = factor(waste_category, levels = waste_category_levels)) |> 
  mutate(type = case_when(
    waste_category == "other" ~ "non_recyclable",
    TRUE ~ "recyclable")) |> 
  relocate(type, .before = weight) |> 
  group_by(objid) |> 
  mutate(percent = weight / sum(weight) * 100)

waste_data_tidy |> 
  write_rds(here::here("slides/data/intermediate_data/waste-characterisation-lord-of-the-bins-tidy.rds"))

```

```{r}
#| eval: false

waste_data_tidy |> 
  group_by(location, waste_category) |> 
  summarise(weight = mean(weight)) |> 
  group_by(location) |> 
  mutate(percent = weight / sum(weight) * 100) 

waste_data_tidy |> 
  
  ggplot(mapping = aes(x = waste_category, y = weight, color = type)) +
  geom_boxplot() +
  geom_jitter(width = 0.2) +
  facet_wrap(~location)

waste_data_tidy |> 
  ggplot(mapping = aes(x = objid, y = weight)) +
  geom_col() 

waste_data_tidy |> 
  ggplot(mapping = aes(x = objid, y = weight, fill = waste_category)) +
  geom_col() 

waste_data_tidy |> 
  ggplot(mapping = aes(x = waste_category, y = percent, color = type)) +
  geom_boxplot() +
  geom_jitter(width = 0.2) +
  facet_wrap(~location)


waste_data_tidy |> 
  ggplot(aes(x = objid, y = percent, fill = waste_category)) +
  geom_col() 

waste_data_tidy |> 
  ggplot(aes(x = objid, y = percent, fill = type)) +
  geom_col() 

waste_data_tidy |> 
  ggplot(aes(x = objid, y = percent, fill = location)) +
  geom_col() +
  facet_wrap(~waste_category, ncol = 5)
```

# Daten Typen und Vektoren {background-color="#4C326A"}

## Why care about data types? Warum sind Daten Typen wichtig?

::: {style="width:75%;height:0;padding-bottom:83%;position:relative;"}
<iframe src="https://giphy.com/embed/SvRuvlSEa67wNNHuHy" width="75%" height="75%" style="position:absolute" frameBorder="0" class="giphy-embed" allowFullScreen>

</iframe>
:::

<p><a href="https://giphy.com/gifs/Friends-episode-20-friends-tv-the-one-with-baby-shower-SvRuvlSEa67wNNHuHy">via GIPHY</a></p>

## Beispiel: Recycling Umfrage in Zürich {.smaller .scrollable}

Eine Umfrage zum Recycling-Verhalten in der Stadt Zürich:

- `job`: Was ist dein Berug?
- `price_glass`: Welchen monatlichen Betrag wärst du bereit für eine Metall/Glas-Tonne vor deinem Haus zu zahlen? 
- 

```{r}
#| echo: false
survey_data_small |> 
  knitr::kable()
```

::: footer
Daten aus [@benaleya2022researcha]
:::

## Oh warum klappt das nicht?! 

```{r}
#| echo: true
survey_data_small |> 
  summarise(mean_price_glass = mean(price_glass))
```

## Oh warum klappt das immernoch nicht!!??

```{r}
#| echo: true
survey_data_small |> 
  summarise(mean_price_glass = mean(price_glass, na.rm = TRUE))
```

## Atme tief durch und schau dir deine Daten an {.smaller .scrollable}

```{r}
#| echo: false
survey_data_small |> 
  knitr::kable()
```

## Atme tief durch und schau dir deine Daten an {.smaller .scrollable}

```{r}
#| echo: false
survey_data_small 
```

## Ein sehr typischer Schritt in der Datenbereinigung! {.small}

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "|2|3,4|5,6|7"

survey_data_small |> 
  mutate(price_glass_new = case_when(
    price_glass == "5-10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "2chf") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) 
```

## Ein sehr typischer Schritt in der Datenbereinigung!  {.scrollable .small}

```{r}
#| echo: false
#| eval: true
survey_data_small |> 
  mutate(price_glass_new = case_when(
    price_glass == "5-10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) |> 
  relocate(price_glass_new, .after = job) |> 
  knitr::kable()
```

## Summarise? Argh!!!! {.small auto-animate="true"}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "9"

survey_data_small |> 
  mutate(price_glass_new = case_when(
    price_glass == "5-10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) |> 
  summarise(mean_price_glass = mean(price_glass_new, na.rm = TRUE))

```

## Respektiere deine Daten Typen!

::: {.callout-important appearance="simple"}
Den Durchschnitt von einem Vektor mit Typ **"character"** zu berechnen ist nicht möglich.
:::

```{r}
survey_data_small |> 
  mutate(price_glass_new = case_when(
    price_glass == "5-10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) 
```

## Respektiere deine Daten Typen! {.smaller auto-animate="true"}

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "9|10"

survey_data_small |> 
  mutate(price_glass_new = case_when(
    price_glass == "5-10" ~ "7.5",
    price_glass == "05-Oct" ~ "7.5",
    str_detect(price_glass, pattern = "20") == TRUE ~ "20",
    str_detect(price_glass, pattern = "See comment") == TRUE ~ NA_character_,
    TRUE ~ price_glass
  )) |> 
  mutate(price_glass_new = as.numeric(price_glass_new)) |> 
  summarise(mean_price_glass = mean(price_glass_new, na.rm = TRUE))

```

## Iteration I

TODO

## Ich bin dran: Vektoren und Iteration mit for loops

<br><br>

::: {.hand-purple-large style="text-align: center;"}
Zurücklehnen und Fragen stellen!
:::

```{r}
countdown(minutes = 25)
```

## Pause machen

[Bitte steh auf und beweg dich.]{.highlight-yellow} Lasst eure E-Mails in Frieden ruhen.

![](img/md-04/pixel-art-tree.png){width="50%"}

```{r}
countdown(minutes = 10)
```

::: footer
Bild erzeugt mit [DALL-E 3 by OpenAI](https://openai.com/blog/dall-e/)
:::

# Ihr seid dran: 02-vektor-typen-ihr.qmd

::: task
1.  Öffne [posit.cloud](https://posit.cloud) in deinem Browser (verwende dein Lesezeichen).
2.  Öffne den rstatszh-k009 Arbeitsbereich (Workspace) für den Kurs.
3.  Klicke auf [Start]{.highlight-yellow} neben [md-05-uebungen]{.highlight-yellow}.
4.  Suche im Dateimanager im Fenster unten rechts die Datei [`02-vektor-typen-ihr.qmd`]{.highlight-yellow} und klicke darauf, um sie im Fenster oben links zu öffnen.
5.  Folge den Anweisungen in der Datei.
:::

```{r}
countdown(35)
```

## Pause machen

[Bitte steh auf und beweg dich.]{.highlight-yellow} Lasst eure E-Mails in Frieden ruhen.

![](img/md-04/pixel-art-tree.png){width="50%"}

```{r}
countdown(minutes = 10)
```

::: footer
Bild erzeugt mit [DALL-E 3 by OpenAI](https://openai.com/blog/dall-e/)
:::

# Zusatzaufgaben Modul 6 {background-color="#4C326A"}

## Modul 6 Dokumentation

::: learn-more
[rstatszh-k009.github.io/website/module/md-06.html](https://rstatszh-k009.github.io/website/module/md-06.html)

```{=html}
<iframe src="https://rstatszh-k009.github.io/website/module/md-06.html" width="100%" height="500" style="border:2px solid #123233;" title="Modul 6 Dokumentation"></iframe>
```
:::

## Zusatzaufgaben Abgabedatum

-   Abgabedatum: [Montag, 04. November]{.highlight-yellow}
-   Korrektur- und Feedbackphase bis zu: Donnerstag, 07. November 

# Danke {background-color="#4C326A"}

## Danke! `r emo::ji("sunflower")` 

Folien erstellt mit revealjs und Quarto: https://quarto.org/docs/presentations/revealjs/ Access slides als [PDF auf GitHub](https://github.com/rstatszh-k009/website/raw/main/folien/md-06-daten-typen.pdf)

Alle Materialien sind lizenziert unter [Creative Commons Attribution Share Alike 4.0 International](https://creativecommons.org/licenses/by-sa/4.0/).