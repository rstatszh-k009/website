---
title: "{{< var md-10.titel >}}"
subtitle: "{{< var course.long-titel >}}"
author: "Lars Schöbitz"
date: "2024-11-26"
date-format: "MMM D, YYYY"
format: 
  revealjs: 
    theme: slides.scss
    transition: fade
    slide-number: true
    chalkboard: true
footer: "[{{< fa link >}} {{< var course.site-short >}}]({{< var course.site >}})"
editor: source
execute:
  freeze: auto
  echo: true
params:
    modul: 10
    jahr: 2022
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(countdown)
library(tidyverse)
library(epoxy)
library(gapminder)
```

```{r}
#| echo: false
# Die Daten werden hier direkt von der URL gelesen. Bei einem Update der Daten
# wird hier immer auf die aktuellste Version zugegriffen.
link <- "https://www.web.statistik.zh.ch/ogd/data/bista/ZH_Uebersicht_alle_Lernende.csv"

# Hier wird nun das Objekt "link" genutzt um die CSV zu lesen
lernende_in <- read_csv(file = link)
```

```{r}
#| echo: false
# Daten transformation
lernende <- lernende_in |> 
    filter(Geschlecht != 2) |> 
    mutate(Geschlecht = case_when(
        Geschlecht %in% c("m", "M") ~ "männlich",
        Geschlecht %in% c("f", "F") ~ "weiblich"
    )) |> 
    mutate(Traegerschaft = case_when(
        Traegerschaft == "oef" ~ "öffentlich",
        Traegerschaft == "priv" ~ "privat"
    )) |>
    mutate(Finanzierung = case_when(
        Finanzierung == "oef" ~ "öffentlich",
        Finanzierung == "priv" ~ "privat")
    ) 

# Daten transofmieren
lernende_ktzh <- lernende |> 
    janitor::clean_names()

# Daten schreiben
write_csv(lernende_ktzh, here::here("folien/daten/lernende_ktzh.csv"))
```

## Lernziele (für diese Woche)

```{r}
#| echo: false
#| label: lernziele

lernziele <- readr::read_csv(here::here("data/tbl-01-rstatszh-k009-lernziele.csv")) |> 
    dplyr::filter(modul == params$modul) |>
    dplyr::pull(lernziele)

```

```{epoxy}
#| echo: false
{1:length(lernziele)}. {lernziele[1:length(lernziele)]}
```

# Zusatzaufgaben Modul 10 {background-color="#4C326A"}

# Funktionen

## Lernende Kanton Zürich

```{r}
lernende_ktzh |> 
    filter(jahr == max(jahr)) |> 
    gt::gt()
```

## Prozentrechnung

```{r}
#| code-line-numbers: "7"
lernende_ktzh |> 
    filter(jahr == max(jahr)) |> 
    group_by(stufe) |> 
    summarise(
        total = sum(anzahl)
    ) |> 
    mutate(prozent = total / sum(total) * 100) |> 
    gt::gt()
```

## Prozentrechnung: Formel

Für die Prozentrechnung, gilt immer folgende Formel:

```{r}
#| eval: false

total / sum(total) * 100

x / sum(x) * 100

```

## Prozentrechnung: Funktion {.smaller}

Die Formel für die Prozenrechnung kann als eine Funktion festgehalten werden. Es braucht drei Dinge:

1. Einen **Namen**: [`berechne_prozent`]{.highlight-yellow} beschreibt was die Funktion macht.

2. Die **Argumente**: Argumente variieren bei jedem Aufruf. Es sind dien Platzhalter für die Werte, die die Funktion verarbeiten soll. Wir nennen es [`x`]{.highlight-yellow}, ein üblicher Name für einen numerischen Vektor.

3. Den **Körper**: Der Körper [`x / sum(x) * 100`]{.highlight-yellow} ist der Code, der in allen Aufrufen wiederholt wird.

```{r}
berechne_prozent <- function(x) {
    x / sum(x) * 100
}
```

## Prozentrechnung: Funktion anwenden

```{r}
berechne_prozent(x = 5)
```

<br>

::: fragment
```{r}
berechne_prozent(x = c(15, 25, 90))
```
:::

<br>

::: fragment
```{r}
berechne_prozent(x = c(15, 25, 90, NA))
```
:::

## Prozentrechnung: Funktion anwenden 

- die Funktion [`berechne_prozent`]{.highlight-yellow} funktioniert nicht, wenn es fehlende Werte gibt.

```{r}
berechne_prozent <- function(x) {
    x / sum(x) * 100
}
```

<br> 

```{r}
berechne_prozent(x = c(15, 25, 90, NA))
```

## Prozentrechnung: Funktion anpassen 

- [`na.rm = TRUE`]{.highlight-yellow} entfernt fehlende Werte von der Berechnung (ignoriert die Werte)

```{r}
berechne_prozent <- function(x) {
    x / sum(x, na.rm = TRUE) * 100
}
```

<br> 

::: fragment
```{r}
berechne_prozent(x = c(15, 25, 90, NA))
```
:::

## Prozentrechnung: Funktion anpassen

- [`round`]{.highlight-yellow} rundet die Ergebnisse auf eine Dezimalstelle

```{r}
berechne_prozent <- function(x) {
    round(x / sum(x, na.rm = TRUE) * 100, 1)
}
```

<br> 

::: fragment
```{r}
berechne_prozent(x = c(15, 25, 90, NA))
```
:::

## Prozentrechnung: Funktion anwenden

```{r}
#| code-line-numbers: "7"
lernende_ktzh |> 
    filter(jahr == max(jahr)) |> 
    group_by(stufe) |> 
    summarise(
        total = sum(anzahl)
    ) |> 
    mutate(prozent = berechne_prozent(total)) |> 
    gt::gt()
```


## Ihr seid dran: `01-funktionen.qmd`

::: task
1.  Öffne [posit.cloud](https://posit.cloud) in deinem Browser (verwende dein Lesezeichen).
2.  Öffne den rstatszh-k009 Arbeitsbereich (Workspace) für den Kurs.
3.  Klicke auf [Start]{.highlight-yellow} neben [md-09-uebungen]{.highlight-yellow}.
4.  Suche im Dateimanager im Fenster unten rechts die Datei [`01-funktionen.qmd`]{.highlight-yellow} und klicke darauf, um sie im Fenster oben links zu öffnen.
5. Verwende den [Quelltexteditor (Source editor)]{.highlight-yellow} Modus
6.  Folge den Anweisungen in der Datei.
:::

```{r}
countdown(15)
```

# Paramter in Quarto Dokumenten 

## Parameter in Quarto Dokumenten

```{r}
#| echo: false
#| out-width: "100%"
#| comment: ""

cat(readr::read_file(here::here("folien/quarto/lernende.qmd")))
```

## Parameter in Quarto Dokumenten

- inline code macht es möglich R code direkt in Text einzubetten

```{verbatim}
Lernende im Jahr `r params$jahr` ...
```

... wird zu: Lernende im Jahr `r params$jahr`

## Parameter in Quarto Dokumenten

- Parameter werden folgendermassen im Code angegeben:

```{r}
lernende_ktzh |> 
    filter(jahr == params$jahr)
```

## Aufgabenstellung: 

## Modul 10 Dokumentation

::: learn-more
[rstatszh-k009.github.io/website/module/md-10.html](https://rstatszh-k009.github.io/website/module/md-10.html)

```{=html}
<iframe src="https://rstatszh-k009.github.io/website/module/md-10.html" width="100%" height="500" style="border:2px solid #123233;" title="Modul 10 Dokumentation"></iframe>
```
:::

## Zusatzaufgaben Abgabedatum

-   Abgabedatum: [Montag, 02. Dezember]{.highlight-yellow}
-   Korrektur- und Feedbackphase bis zu: Donnerstag, 05. Dezember 

# Danke {background-color="#4C326A"}

## Danke! `r emo::ji("sunflower")` 

Folien erstellt mit revealjs und Quarto: https://quarto.org/docs/presentations/revealjs/ Access slides als [PDF auf GitHub](https://github.com/rstatszh-k009/website/raw/main/folien/md-10-funktionen.pdf)

Alle Materialien sind lizenziert unter [Creative Commons Attribution Share Alike 4.0 International](https://creativecommons.org/licenses/by-sa/4.0/).