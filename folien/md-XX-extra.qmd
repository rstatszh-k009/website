

## Gruppierte Summe

- Funktionen mit `dplyr` Verben schreiben
- Das Ziel dieser Funktion ist es, die Summe von `sum_var` gruppiert nach `group_var` zu berechnen.

```{r}
grouped_sum <- function(df, group_var, sum_var) {
    df |> 
        group_by(group_var) |> 
        summarize(sum(sum_var))
}
```

## Gruppierte Summe: Indirection

- Nicht möglich, aufgrund eines Problem namens `indirection` 

```{r}

lernende_ktzh |> 
    filter(jahr == max(jahr)) |> 
    grouped_sum(group_var = stufe, 
                sum_var = anzahl) 

```

- `group_var` und `sum_var` werden als wörtliche Variablen-Namen gesehen 

```{r}
grouped_sum <- function(df, group_var, sum_var) {
    df |> 
        group_by(group_var) |> 
        summarize(sum(sum_var))
}
```

## Gruppierte Summe: Tidy Evaluation

- Einbinden einer Variable mit `{{ var }}` weist `dplyr` an, den im Argument gespeicherten Wert zu verwenden, nicht das Argument als wörtlichen Variablen-Namen.

```{r}
grouped_sum <- function(df, group_var, sum_var) {
    df |> 
        group_by({{ group_var }}) |> 
        summarize(sum({{ sum_var }}))
}
```

<br>

::: fragment
```{r}
lernende_ktzh |> 
    filter(jahr == max(jahr)) |> 
    grouped_sum(group_var = stufe, 
                sum_var = anzahl) 
```
::: 

## Gruppierte Summe: Tidy Evaluation

- Einbinden einer Variable mit `{{ var }}` weist `dplyr` an, den im Argument gespeicherten Wert zu verwenden, nicht das Argument als wörtlichen Variablen-Namen.

```{r}
grouped_sum <- function(df, group_var, sum_var) {
    df |> 
        group_by({{ group_var }}) |> 
        summarise(({{ sum_var }}))
}
```

<br>

::: fragment
```{r}
lernende_ktzh |> 
    filter(jahr == max(jahr)) |> 
    grouped_sum(group_var = stufe, 
                sum_var = anzahl) 
```
::: 